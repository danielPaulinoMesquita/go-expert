gRpc:

it uses http2, it's faster them others

it uses PROTOCOL BUFFER vs JSON, Protocol buffers are made in binaries, and his format is in XML, example:
message SearchRequest {
String query =1;
int32 page_number =
}

---- || ---- || -----
HTTP/2 initially was called SPDY

At one API gRPC make many directionals streaming, like one client make many requests and the server make many responses.


---- || ---- || -----
REST            vs                   gRPC
*Text/Json                           Protocol Buffers
*Unidirecional                       Bidirecional e Assíncrono
*Alta Latência                       Baixa latência
*Sem contrato (maior chance)         Contrato definito (.photo)
*Sem Suporte a steaming (Request/    Suporte a streaming
Response)                            Design é livre
*Design pré-definido                 Geração de código


----- || ----- || ----
install Protocol

https://grpc.io/docs/protoc-installation/

To install gRPC in go
https://grpc.io/docs/languages/go/quickstart/
----- || ----- || ----

Generate the code protoc, line command to be run in the bash
protoc --go_out=. --go-grpc_out=. proto/course_category.proto

protoc --go_out=. // where will create the context usind plugin
--go-grpc_out=. proto/course_category.proto // the file must be generatesd


----|| ----- || ------

Using EVANS to make request GRPC

https://github.com/ktr0731/evans/releases

go install github.com/ktr0731/evans@v0.10.10

so, you can start the server using: go run main.go and later to run evans using: evans -r repl

sometimes the command:  service CategoryService doesn't work
because you need to set the directory using the command line:
- package pb